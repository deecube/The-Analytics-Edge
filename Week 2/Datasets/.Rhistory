#Generating ROC curves
install.packages("ROCR")
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
#predicting on training set
predictTrain = predict(model1, type = "response")
#logistic regression
setwd("C:/Users/Deb/Desktop/Tinker/The Analytics Edge/Week 3/Datasets")
quality = read.csv("quality.csv")
str(quality)
summary(quality)
colors = c("red", "green")
plot(quality$OfficeVisits, quality$Narcotics, col = c("green","red")[quality$PoorCare])
#splitting the datset into train and test
#install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
#building a logstic regression model
model1 = glm(PoorCare ~ StartedOnCombination + ProviderCount, data = qualityTrain, family = binomial)
summary(model1)
#predicting on training set
predictTrain = predict(model1, type = "response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
#calculating the confusion matrix
table(qualityTrain$PoorCare, predictTrain > 0.5)
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predict, qualityTrain$PoorCare)
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCperf = performance(ROCpred, "tpr", "fpr")
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCpred, "tpr", "fpr")
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1))
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0,0))
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
table(qualityTest$PoorCare, predictTest > 0.3)
table(qualityTest$PoorCare, predictTest > 0.2)
table(qualityTest$PoorCare, predictTest > 0.2)
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
table(qualityTest$PoorCare, predictTest > 0.2)
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
table(qualityTest$PoorCare, predictTest > 0.3)
#building a logstic regression model
model1 = glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = binomial)
summary(model1)
#predicting on training set
predictTrain = predict(model1, type = "response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
#calculating the confusion matrix
table(qualityTrain$PoorCare, predictTrain > 0.5)
#Generating ROC curves
#install.packages("ROCR")
library(ROCR)
ROCRpred = prediction(predictTrain, qualityTrain$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
table(qualityTest$PoorCare, predictTest > 0.3)
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpred = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpredTest, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
table(qualityTest$PoorCare, predictTest > 0.3)
#Predict on unseen data
predictTest = predict(model1, type = "response", newdata = qualityTest)
ROCRpredTest = prediction(predictTest, qualityTest$PoorCare)
ROCRperf = performance(ROCRpredTest, "tpr", "fpr")
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
auc = as.numeric(performance(ROCRpredTest, "auc")@y.values)
auc
table(qualityTest$PoorCare, predictTest > 0.3)
#predicting elantra car sales
setwd("C:/Users/Deb/Desktop/Tinker/The Analytics Edge/Week 2/Datasets")
elantra = read.csv("elantra.csv")
#predicting elantra car sales
setwd("C:/Users/Deb/Desktop/Tinker/The Analytics Edge/Week 2/Datasets")
elantra = read.csv("elantra.csv")
#predicting elantra car sales
setwd("C:/Users/Deb/Desktop/Tinker/The Analytics Edge/Week 2/Datasets")
elantra = read.csv("elantra.csv")
elantraTrain = subset(elantra, Year<2013)
elantraTest = subset(elantra, Year > 2012)
#predicting elantra car sales
setwd("C:/Users/Deb/Desktop/Tinker/The Analytics Edge/Week 2/Datasets")
elantra = read.csv("elantra.csv")
elantraTrain = subset(elantra, Year<2013)
elantraTest = subset(elantra, Year > 2012)
summary(elantraTrain)
#Building a Linear Regression model to predict car sales
model1 = lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(model1)
# Modelling seasonality
model2 = lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries + Month, data = elantraTrain)
summary(model2)
#New model with month as a factor
elantraTrain$Month = as.factor(elantraTrain$Month)
elantraTest$Month = as.factor(elantraTest$Month)
model3 = lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries + Month, data = elantraTrain)
summary(model3)
#correlation between variables
cor(elantraTrain)
#correlation between variables
cor(elantraTrain$CPI_energy)
#correlation between variables
elantraTrain$Month = as.numeric(elantraTrain$Month)
cor(elantraTrain)
#New model with month as a factor
elantraTrain$Month = as.factor(elantraTrain$Month)
elantraTest$Month = as.factor(elantraTest$Month)
model3 = lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries + Month, data = elantraTrain)
summary(model3)
#leaner model
model4 = lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Month, data = elantraTrain)
summary(model4)
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SSE
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
mean(elantraTrain$ElantraSales)
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(predictTest))
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
elantraTest$ElantraSales
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
elantraTest$ElantraSales
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
diff = predictTest - elantraTest$ElantraSales
diff
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
elantraTest$ElantraSales
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
diff = predictTest - elantraTest$ElantraSales
diff
elantraTest
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
elantraTest$ElantraSales
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
diff = predictTest - elantraTest$ElantraSales
diff
elantraTest
which.max(abs(predictTest - elantraTest$ElantraSales))
#predict
predictTest = predict(model4, newdata = elantraTest)
predictTest
elantraTest$ElantraSales
SSE = sum((elantraTest$ElantraSales - predictTest)^2)
SST = sum((elantraTest$ElantraSales - mean(elantraTrain$ElantraSales))^2)
rSquared = 1 - SSE/SST
rSquared
RMSE = sqrt(SSE/nrow(elantraTest))
elantraTest
which.max(abs(predictTest - elantraTest$ElantraSales))
